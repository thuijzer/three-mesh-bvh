{"mappings":"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","sources":["node_modules/stats.js/src/Stats.js","node_modules/three/examples/jsm/loaders/PLYLoader.js","example/pointCloudIntersection.js"],"sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar Stats = function () {\n\n\tvar mode = 0;\n\n\tvar container = document.createElement( 'div' );\n\tcontainer.style.cssText = 'position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000';\n\tcontainer.addEventListener( 'click', function ( event ) {\n\n\t\tevent.preventDefault();\n\t\tshowPanel( ++ mode % container.children.length );\n\n\t}, false );\n\n\t//\n\n\tfunction addPanel( panel ) {\n\n\t\tcontainer.appendChild( panel.dom );\n\t\treturn panel;\n\n\t}\n\n\tfunction showPanel( id ) {\n\n\t\tfor ( var i = 0; i < container.children.length; i ++ ) {\n\n\t\t\tcontainer.children[ i ].style.display = i === id ? 'block' : 'none';\n\n\t\t}\n\n\t\tmode = id;\n\n\t}\n\n\t//\n\n\tvar beginTime = ( performance || Date ).now(), prevTime = beginTime, frames = 0;\n\n\tvar fpsPanel = addPanel( new Stats.Panel( 'FPS', '#0ff', '#002' ) );\n\tvar msPanel = addPanel( new Stats.Panel( 'MS', '#0f0', '#020' ) );\n\n\tif ( self.performance && self.performance.memory ) {\n\n\t\tvar memPanel = addPanel( new Stats.Panel( 'MB', '#f08', '#201' ) );\n\n\t}\n\n\tshowPanel( 0 );\n\n\treturn {\n\n\t\tREVISION: 16,\n\n\t\tdom: container,\n\n\t\taddPanel: addPanel,\n\t\tshowPanel: showPanel,\n\n\t\tbegin: function () {\n\n\t\t\tbeginTime = ( performance || Date ).now();\n\n\t\t},\n\n\t\tend: function () {\n\n\t\t\tframes ++;\n\n\t\t\tvar time = ( performance || Date ).now();\n\n\t\t\tmsPanel.update( time - beginTime, 200 );\n\n\t\t\tif ( time > prevTime + 1000 ) {\n\n\t\t\t\tfpsPanel.update( ( frames * 1000 ) / ( time - prevTime ), 100 );\n\n\t\t\t\tprevTime = time;\n\t\t\t\tframes = 0;\n\n\t\t\t\tif ( memPanel ) {\n\n\t\t\t\t\tvar memory = performance.memory;\n\t\t\t\t\tmemPanel.update( memory.usedJSHeapSize / 1048576, memory.jsHeapSizeLimit / 1048576 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tbeginTime = this.end();\n\n\t\t},\n\n\t\t// Backwards Compatibility\n\n\t\tdomElement: container,\n\t\tsetMode: showPanel\n\n\t};\n\n};\n\nStats.Panel = function ( name, fg, bg ) {\n\n\tvar min = Infinity, max = 0, round = Math.round;\n\tvar PR = round( window.devicePixelRatio || 1 );\n\n\tvar WIDTH = 80 * PR, HEIGHT = 48 * PR,\n\t\t\tTEXT_X = 3 * PR, TEXT_Y = 2 * PR,\n\t\t\tGRAPH_X = 3 * PR, GRAPH_Y = 15 * PR,\n\t\t\tGRAPH_WIDTH = 74 * PR, GRAPH_HEIGHT = 30 * PR;\n\n\tvar canvas = document.createElement( 'canvas' );\n\tcanvas.width = WIDTH;\n\tcanvas.height = HEIGHT;\n\tcanvas.style.cssText = 'width:80px;height:48px';\n\n\tvar context = canvas.getContext( '2d' );\n\tcontext.font = 'bold ' + ( 9 * PR ) + 'px Helvetica,Arial,sans-serif';\n\tcontext.textBaseline = 'top';\n\n\tcontext.fillStyle = bg;\n\tcontext.fillRect( 0, 0, WIDTH, HEIGHT );\n\n\tcontext.fillStyle = fg;\n\tcontext.fillText( name, TEXT_X, TEXT_Y );\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\tcontext.fillStyle = bg;\n\tcontext.globalAlpha = 0.9;\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\treturn {\n\n\t\tdom: canvas,\n\n\t\tupdate: function ( value, maxValue ) {\n\n\t\t\tmin = Math.min( min, value );\n\t\t\tmax = Math.max( max, value );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 1;\n\t\t\tcontext.fillRect( 0, 0, WIDTH, GRAPH_Y );\n\t\t\tcontext.fillStyle = fg;\n\t\t\tcontext.fillText( round( value ) + ' ' + name + ' (' + round( min ) + '-' + round( max ) + ')', TEXT_X, TEXT_Y );\n\n\t\t\tcontext.drawImage( canvas, GRAPH_X + PR, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT, GRAPH_X, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 0.9;\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, round( ( 1 - ( value / maxValue ) ) * GRAPH_HEIGHT ) );\n\n\t\t}\n\n\t};\n\n};\n\nexport { Stats as default };\n","import {\n\tBufferGeometry,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tLoader,\n\tLoaderUtils,\n\tColor\n} from 'three';\n\n/**\n * Description: A THREE loader for PLY ASCII files (known as the Polygon\n * File Format or the Stanford Triangle Format).\n *\n * Limitations: ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *\tconst loader = new PLYLoader();\n *\tloader.load('./models/ply/ascii/dolphins.ply', function (geometry) {\n *\n *\t\tscene.add( new THREE.Mesh( geometry ) );\n *\n *\t} );\n *\n * If the PLY file uses non standard property names, they can be mapped while\n * loading. For example, the following maps the properties\n * “diffuse_(red|green|blue)” in the file to standard color names.\n *\n * loader.setPropertyNameMapping( {\n *\tdiffuse_red: 'red',\n *\tdiffuse_green: 'green',\n *\tdiffuse_blue: 'blue'\n * } );\n *\n */\n\nconst _color = new Color();\n\nclass PLYLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.propertyNameMapping = {};\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tsetPropertyNameMapping( mapping ) {\n\n\t\tthis.propertyNameMapping = mapping;\n\n\t}\n\n\tparse( data ) {\n\n\t\tfunction parseHeader( data ) {\n\n\t\t\tconst patternHeader = /^ply([\\s\\S]*)end_header\\r?\\n/;\n\t\t\tlet headerText = '';\n\t\t\tlet headerLength = 0;\n\t\t\tconst result = patternHeader.exec( data );\n\n\t\t\tif ( result !== null ) {\n\n\t\t\t\theaderText = result[ 1 ];\n\t\t\t\theaderLength = new Blob( [ result[ 0 ] ] ).size;\n\n\t\t\t}\n\n\t\t\tconst header = {\n\t\t\t\tcomments: [],\n\t\t\t\telements: [],\n\t\t\t\theaderLength: headerLength,\n\t\t\t\tobjInfo: ''\n\t\t\t};\n\n\t\t\tconst lines = headerText.split( '\\n' );\n\t\t\tlet currentElement;\n\n\t\t\tfunction make_ply_element_property( propertValues, propertyNameMapping ) {\n\n\t\t\t\tconst property = { type: propertValues[ 0 ] };\n\n\t\t\t\tif ( property.type === 'list' ) {\n\n\t\t\t\t\tproperty.name = propertValues[ 3 ];\n\t\t\t\t\tproperty.countType = propertValues[ 1 ];\n\t\t\t\t\tproperty.itemType = propertValues[ 2 ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tproperty.name = propertValues[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( property.name in propertyNameMapping ) {\n\n\t\t\t\t\tproperty.name = propertyNameMapping[ property.name ];\n\n\t\t\t\t}\n\n\t\t\t\treturn property;\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0; i < lines.length; i ++ ) {\n\n\t\t\t\tlet line = lines[ i ];\n\t\t\t\tline = line.trim();\n\n\t\t\t\tif ( line === '' ) continue;\n\n\t\t\t\tconst lineValues = line.split( /\\s+/ );\n\t\t\t\tconst lineType = lineValues.shift();\n\t\t\t\tline = lineValues.join( ' ' );\n\n\t\t\t\tswitch ( lineType ) {\n\n\t\t\t\t\tcase 'format':\n\n\t\t\t\t\t\theader.format = lineValues[ 0 ];\n\t\t\t\t\t\theader.version = lineValues[ 1 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'comment':\n\n\t\t\t\t\t\theader.comments.push( line );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'element':\n\n\t\t\t\t\t\tif ( currentElement !== undefined ) {\n\n\t\t\t\t\t\t\theader.elements.push( currentElement );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentElement = {};\n\t\t\t\t\t\tcurrentElement.name = lineValues[ 0 ];\n\t\t\t\t\t\tcurrentElement.count = parseInt( lineValues[ 1 ] );\n\t\t\t\t\t\tcurrentElement.properties = [];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'property':\n\n\t\t\t\t\t\tcurrentElement.properties.push( make_ply_element_property( lineValues, scope.propertyNameMapping ) );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'obj_info':\n\n\t\t\t\t\t\theader.objInfo = line;\n\n\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.log( 'unhandled', lineType, lineValues );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( currentElement !== undefined ) {\n\n\t\t\t\theader.elements.push( currentElement );\n\n\t\t\t}\n\n\t\t\treturn header;\n\n\t\t}\n\n\t\tfunction parseASCIINumber( n, type ) {\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 'char': case 'uchar': case 'short': case 'ushort': case 'int': case 'uint':\n\t\t\t\tcase 'int8': case 'uint8': case 'int16': case 'uint16': case 'int32': case 'uint32':\n\n\t\t\t\t\treturn parseInt( n );\n\n\t\t\t\tcase 'float': case 'double': case 'float32': case 'float64':\n\n\t\t\t\t\treturn parseFloat( n );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseASCIIElement( properties, line ) {\n\n\t\t\tconst values = line.split( /\\s+/ );\n\n\t\t\tconst element = {};\n\n\t\t\tfor ( let i = 0; i < properties.length; i ++ ) {\n\n\t\t\t\tif ( properties[ i ].type === 'list' ) {\n\n\t\t\t\t\tconst list = [];\n\t\t\t\t\tconst n = parseASCIINumber( values.shift(), properties[ i ].countType );\n\n\t\t\t\t\tfor ( let j = 0; j < n; j ++ ) {\n\n\t\t\t\t\t\tlist.push( parseASCIINumber( values.shift(), properties[ i ].itemType ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\telement[ properties[ i ].name ] = list;\n\n\t\t\t\t} else {\n\n\t\t\t\t\telement[ properties[ i ].name ] = parseASCIINumber( values.shift(), properties[ i ].type );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn element;\n\n\t\t}\n\n\t\tfunction parseASCII( data, header ) {\n\n\t\t\t// PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)\n\n\t\t\tconst buffer = {\n\t\t\t\tindices: [],\n\t\t\t\tvertices: [],\n\t\t\t\tnormals: [],\n\t\t\t\tuvs: [],\n\t\t\t\tfaceVertexUvs: [],\n\t\t\t\tcolors: []\n\t\t\t};\n\n\t\t\tlet result;\n\n\t\t\tconst patternBody = /end_header\\s([\\s\\S]*)$/;\n\t\t\tlet body = '';\n\t\t\tif ( ( result = patternBody.exec( data ) ) !== null ) {\n\n\t\t\t\tbody = result[ 1 ];\n\n\t\t\t}\n\n\t\t\tconst lines = body.split( '\\n' );\n\t\t\tlet currentElement = 0;\n\t\t\tlet currentElementCount = 0;\n\n\t\t\tfor ( let i = 0; i < lines.length; i ++ ) {\n\n\t\t\t\tlet line = lines[ i ];\n\t\t\t\tline = line.trim();\n\t\t\t\tif ( line === '' ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tif ( currentElementCount >= header.elements[ currentElement ].count ) {\n\n\t\t\t\t\tcurrentElement ++;\n\t\t\t\t\tcurrentElementCount = 0;\n\n\t\t\t\t}\n\n\t\t\t\tconst element = parseASCIIElement( header.elements[ currentElement ].properties, line );\n\n\t\t\t\thandleElement( buffer, header.elements[ currentElement ].name, element );\n\n\t\t\t\tcurrentElementCount ++;\n\n\t\t\t}\n\n\t\t\treturn postProcess( buffer );\n\n\t\t}\n\n\t\tfunction postProcess( buffer ) {\n\n\t\t\tlet geometry = new BufferGeometry();\n\n\t\t\t// mandatory buffer data\n\n\t\t\tif ( buffer.indices.length > 0 ) {\n\n\t\t\t\tgeometry.setIndex( buffer.indices );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( buffer.vertices, 3 ) );\n\n\t\t\t// optional buffer data\n\n\t\t\tif ( buffer.normals.length > 0 ) {\n\n\t\t\t\tgeometry.setAttribute( 'normal', new Float32BufferAttribute( buffer.normals, 3 ) );\n\n\t\t\t}\n\n\t\t\tif ( buffer.uvs.length > 0 ) {\n\n\t\t\t\tgeometry.setAttribute( 'uv', new Float32BufferAttribute( buffer.uvs, 2 ) );\n\n\t\t\t}\n\n\t\t\tif ( buffer.colors.length > 0 ) {\n\n\t\t\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( buffer.colors, 3 ) );\n\n\t\t\t}\n\n\t\t\tif ( buffer.faceVertexUvs.length > 0 ) {\n\n\t\t\t\tgeometry = geometry.toNonIndexed();\n\t\t\t\tgeometry.setAttribute( 'uv', new Float32BufferAttribute( buffer.faceVertexUvs, 2 ) );\n\n\t\t\t}\n\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction handleElement( buffer, elementName, element ) {\n\n\t\t\tfunction findAttrName( names ) {\n\n\t\t\t\tfor ( let i = 0, l = names.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst name = names[ i ];\n\n\t\t\t\t\tif ( name in element ) return name;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tconst attrX = findAttrName( [ 'x', 'px', 'posx' ] ) || 'x';\n\t\t\tconst attrY = findAttrName( [ 'y', 'py', 'posy' ] ) || 'y';\n\t\t\tconst attrZ = findAttrName( [ 'z', 'pz', 'posz' ] ) || 'z';\n\t\t\tconst attrNX = findAttrName( [ 'nx', 'normalx' ] );\n\t\t\tconst attrNY = findAttrName( [ 'ny', 'normaly' ] );\n\t\t\tconst attrNZ = findAttrName( [ 'nz', 'normalz' ] );\n\t\t\tconst attrS = findAttrName( [ 's', 'u', 'texture_u', 'tx' ] );\n\t\t\tconst attrT = findAttrName( [ 't', 'v', 'texture_v', 'ty' ] );\n\t\t\tconst attrR = findAttrName( [ 'red', 'diffuse_red', 'r', 'diffuse_r' ] );\n\t\t\tconst attrG = findAttrName( [ 'green', 'diffuse_green', 'g', 'diffuse_g' ] );\n\t\t\tconst attrB = findAttrName( [ 'blue', 'diffuse_blue', 'b', 'diffuse_b' ] );\n\n\t\t\tif ( elementName === 'vertex' ) {\n\n\t\t\t\tbuffer.vertices.push( element[ attrX ], element[ attrY ], element[ attrZ ] );\n\n\t\t\t\tif ( attrNX !== null && attrNY !== null && attrNZ !== null ) {\n\n\t\t\t\t\tbuffer.normals.push( element[ attrNX ], element[ attrNY ], element[ attrNZ ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( attrS !== null && attrT !== null ) {\n\n\t\t\t\t\tbuffer.uvs.push( element[ attrS ], element[ attrT ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( attrR !== null && attrG !== null && attrB !== null ) {\n\n\t\t\t\t\t_color.setRGB(\n\t\t\t\t\t\telement[ attrR ] / 255.0,\n\t\t\t\t\t\telement[ attrG ] / 255.0,\n\t\t\t\t\t\telement[ attrB ] / 255.0\n\t\t\t\t\t).convertSRGBToLinear();\n\n\t\t\t\t\tbuffer.colors.push( _color.r, _color.g, _color.b );\n\n\t\t\t\t}\n\n\t\t\t} else if ( elementName === 'face' ) {\n\n\t\t\t\tconst vertex_indices = element.vertex_indices || element.vertex_index; // issue #9338\n\t\t\t\tconst texcoord = element.texcoord;\n\n\t\t\t\tif ( vertex_indices.length === 3 ) {\n\n\t\t\t\t\tbuffer.indices.push( vertex_indices[ 0 ], vertex_indices[ 1 ], vertex_indices[ 2 ] );\n\n\t\t\t\t\tif ( texcoord && texcoord.length === 6 ) {\n\n\t\t\t\t\t\tbuffer.faceVertexUvs.push( texcoord[ 0 ], texcoord[ 1 ] );\n\t\t\t\t\t\tbuffer.faceVertexUvs.push( texcoord[ 2 ], texcoord[ 3 ] );\n\t\t\t\t\t\tbuffer.faceVertexUvs.push( texcoord[ 4 ], texcoord[ 5 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( vertex_indices.length === 4 ) {\n\n\t\t\t\t\tbuffer.indices.push( vertex_indices[ 0 ], vertex_indices[ 1 ], vertex_indices[ 3 ] );\n\t\t\t\t\tbuffer.indices.push( vertex_indices[ 1 ], vertex_indices[ 2 ], vertex_indices[ 3 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction binaryRead( dataview, at, type, little_endian ) {\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\t// corespondences for non-specific length types here match rply:\n\t\t\t\tcase 'int8':\t\tcase 'char':\t return [ dataview.getInt8( at ), 1 ];\n\t\t\t\tcase 'uint8':\t\tcase 'uchar':\t return [ dataview.getUint8( at ), 1 ];\n\t\t\t\tcase 'int16':\t\tcase 'short':\t return [ dataview.getInt16( at, little_endian ), 2 ];\n\t\t\t\tcase 'uint16':\tcase 'ushort': return [ dataview.getUint16( at, little_endian ), 2 ];\n\t\t\t\tcase 'int32':\t\tcase 'int':\t\t return [ dataview.getInt32( at, little_endian ), 4 ];\n\t\t\t\tcase 'uint32':\tcase 'uint':\t return [ dataview.getUint32( at, little_endian ), 4 ];\n\t\t\t\tcase 'float32': case 'float':\t return [ dataview.getFloat32( at, little_endian ), 4 ];\n\t\t\t\tcase 'float64': case 'double': return [ dataview.getFloat64( at, little_endian ), 8 ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction binaryReadElement( dataview, at, properties, little_endian ) {\n\n\t\t\tconst element = {};\n\t\t\tlet result, read = 0;\n\n\t\t\tfor ( let i = 0; i < properties.length; i ++ ) {\n\n\t\t\t\tif ( properties[ i ].type === 'list' ) {\n\n\t\t\t\t\tconst list = [];\n\n\t\t\t\t\tresult = binaryRead( dataview, at + read, properties[ i ].countType, little_endian );\n\t\t\t\t\tconst n = result[ 0 ];\n\t\t\t\t\tread += result[ 1 ];\n\n\t\t\t\t\tfor ( let j = 0; j < n; j ++ ) {\n\n\t\t\t\t\t\tresult = binaryRead( dataview, at + read, properties[ i ].itemType, little_endian );\n\t\t\t\t\t\tlist.push( result[ 0 ] );\n\t\t\t\t\t\tread += result[ 1 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\telement[ properties[ i ].name ] = list;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresult = binaryRead( dataview, at + read, properties[ i ].type, little_endian );\n\t\t\t\t\telement[ properties[ i ].name ] = result[ 0 ];\n\t\t\t\t\tread += result[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn [ element, read ];\n\n\t\t}\n\n\t\tfunction parseBinary( data, header ) {\n\n\t\t\tconst buffer = {\n\t\t\t\tindices: [],\n\t\t\t\tvertices: [],\n\t\t\t\tnormals: [],\n\t\t\t\tuvs: [],\n\t\t\t\tfaceVertexUvs: [],\n\t\t\t\tcolors: []\n\t\t\t};\n\n\t\t\tconst little_endian = ( header.format === 'binary_little_endian' );\n\t\t\tconst body = new DataView( data, header.headerLength );\n\t\t\tlet result, loc = 0;\n\n\t\t\tfor ( let currentElement = 0; currentElement < header.elements.length; currentElement ++ ) {\n\n\t\t\t\tfor ( let currentElementCount = 0; currentElementCount < header.elements[ currentElement ].count; currentElementCount ++ ) {\n\n\t\t\t\t\tresult = binaryReadElement( body, loc, header.elements[ currentElement ].properties, little_endian );\n\t\t\t\t\tloc += result[ 1 ];\n\t\t\t\t\tconst element = result[ 0 ];\n\n\t\t\t\t\thandleElement( buffer, header.elements[ currentElement ].name, element );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn postProcess( buffer );\n\n\t\t}\n\n\t\t//\n\n\t\tlet geometry;\n\t\tconst scope = this;\n\n\t\tif ( data instanceof ArrayBuffer ) {\n\n\t\t\tconst text = LoaderUtils.decodeText( new Uint8Array( data ) );\n\t\t\tconst header = parseHeader( text );\n\n\t\t\tgeometry = header.format === 'ascii' ? parseASCII( text, header ) : parseBinary( data, header );\n\n\t\t} else {\n\n\t\t\tgeometry = parseASCII( data, parseHeader( data ) );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n}\n\nexport { PLYLoader };\n","import Stats from 'stats.js/src/Stats';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { PLYLoader } from 'three/examples/jsm/loaders/PLYLoader.js';\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport {\n\tacceleratedRaycast, computeBoundsTree, disposeBoundsTree, MeshBVHVisualizer, INTERSECTED, NOT_INTERSECTED,\n\tSAH, CENTER, AVERAGE,\n} from '..';\n\nTHREE.Mesh.prototype.raycast = acceleratedRaycast;\nTHREE.BufferGeometry.prototype.computeBoundsTree = computeBoundsTree;\nTHREE.BufferGeometry.prototype.disposeBoundsTree = disposeBoundsTree;\n\nlet stats;\nlet scene, camera, renderer, bvhMesh, helper, pointCloud, outputContainer;\nlet mouse = new THREE.Vector2();\nlet sphereCollision;\n\nconst plyPath = '../models/point_cloud_porsche_911_1.7M_vertices/scene.ply';\nconst raycaster = new THREE.Raycaster();\nconst params = {\n\n\tdisplayHelper: false,\n\thelperDepth: 10,\n\tdisplayParents: false,\n\n\tstrategy: CENTER,\n\tpointSize: 0.005,\n\traycastThreshold: 0.005,\n\tuseBVH: true,\n\n};\n\nfunction init() {\n\n\tconst bgColor = 0x263238 / 2;\n\n\toutputContainer = document.getElementById( 'output' );\n\n\t// renderer setup\n\trenderer = new THREE.WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setClearColor( bgColor, 1 );\n\tdocument.body.appendChild( renderer.domElement );\n\n\t// scene setup\n\tscene = new THREE.Scene();\n\n\t// camera setup\n\tcamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 50 );\n\tcamera.position.set( 3, 3, 3 );\n\tcamera.far = 100;\n\tcamera.updateProjectionMatrix();\n\n\tnew OrbitControls( camera, renderer.domElement );\n\n\t// stats setup\n\tstats = new Stats();\n\tdocument.body.appendChild( stats.dom );\n\n\n\twindow.addEventListener( 'resize', function () {\n\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n\t}, false );\n\n\t// Load point cloud\n\tconst loader = new PLYLoader();\n\tloader.load( plyPath, geometry => {\n\n\t\tgeometry.center();\n\t\tconst material = new THREE.PointsMaterial( { size: params.pointSize, vertexColors: true } );\n\t\tpointCloud = new THREE.Points( geometry, material );\n\t\tpointCloud.matrixAutoUpdate = false;\n\n\t\tscene.add( pointCloud );\n\n\t\t// BVH Mesh creation\n\t\tconst indices = [];\n\t\tconst bvhGeometry = geometry.clone();\n\t\tlet verticesLength = bvhGeometry.attributes.position.count;\n\t\tfor ( let i = 0, l = verticesLength; i < l; i ++ ) {\n\n\t\t\tindices.push( i, i, i );\n\n\t\t}\n\n\t\tbvhGeometry.setIndex( indices );\n\t\tconst bvhMaterial = new THREE.MeshBasicMaterial( { color: 0xff0000 } );\n\t\tbvhMesh = new THREE.Mesh( bvhGeometry, bvhMaterial );\n\n\t\tconsole.time( 'computeBoundsTree' );\n\t\tbvhMesh.geometry.computeBoundsTree( { mode: params.mode } );\n\t\tconsole.timeEnd( 'computeBoundsTree' );\n\n\t\thelper = new MeshBVHVisualizer( bvhMesh, params.depth );\n\t\tscene.add( helper );\n\n\t} );\n\n\tconst geometry = new THREE.SphereGeometry( 0.01, 32, 32 );\n\tconst material = new THREE.MeshBasicMaterial( { color: 0xffff00, opacity: 0.9, transparent: true } );\n\tsphereCollision = new THREE.Mesh( geometry, material );\n\tsphereCollision.visible = false;\n\tscene.add( sphereCollision );\n\n\tconst gui = new GUI();\n\tconst helperFolder = gui.addFolder( 'helper' );\n\thelperFolder.add( params, 'displayHelper' );\n\thelperFolder.add( params, 'displayParents' ).onChange( v => {\n\n\t\thelper.displayParents = v;\n\t\thelper.update();\n\n\t} );\n\thelperFolder.add( params, 'helperDepth', 1, 20, 1 ).name( 'depth' ).onChange( v => {\n\n\t\thelper.depth = parseInt( v );\n\t\thelper.update();\n\n\t} );\n\thelperFolder.open();\n\n\tconst pointsFolder = gui.addFolder( 'points' );\n\tpointsFolder.add( params, 'useBVH' );\n\tpointsFolder.add( params, 'strategy', { CENTER, AVERAGE, SAH } ).onChange( v => {\n\n\t\tconsole.time( 'computeBoundsTree' );\n\t\tbvhMesh.geometry.computeBoundsTree( { strategy: parseInt( v ) } );\n\t\tconsole.timeEnd( 'computeBoundsTree' );\n\t\thelper.update();\n\n\t} );\n\tpointsFolder.add( params, 'pointSize', 0.001, 0.01, 0.001 );\n\tpointsFolder.add( params, 'raycastThreshold', 0.001, 0.01, 0.001 );\n\tpointsFolder.open();\n\n}\n\nwindow.addEventListener( 'pointermove', ( event ) => {\n\n\tif ( ! bvhMesh ) {\n\n\t\treturn;\n\n\t}\n\n\tmouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n\tmouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n\traycaster.setFromCamera( mouse, camera );\n\n\tconst startTime = window.performance.now();\n\tif ( params.useBVH ) {\n\n\t\tsphereCollision.visible = false;\n\n\t\tconst inverseMatrix = new THREE.Matrix4();\n\t\tinverseMatrix.copy( bvhMesh.matrixWorld ).invert();\n\t\traycaster.ray.applyMatrix4( inverseMatrix );\n\n\t\tconst threshold = raycaster.params.Points.threshold;\n\t\tconst localThreshold = threshold / ( ( bvhMesh.scale.x + bvhMesh.scale.y + bvhMesh.scale.z ) / 3 );\n\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\tconst { ray } = raycaster;\n\t\tlet closestDistance = Infinity;\n\t\tbvhMesh.geometry.boundsTree.shapecast( {\n\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\t// traverse the closer bounds first.\n\t\t\t\treturn box.distanceToPoint( ray.origin );\n\n\t\t\t},\n\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\t// if we've already found a point that's closer then the full bounds then\n\t\t\t\t// don't traverse further.\n\t\t\t\tif ( score > closestDistance ) {\n\n\t\t\t\t\treturn NOT_INTERSECTED;\n\n\t\t\t\t}\n\n\t\t\t\tbox.expandByScalar( localThreshold );\n\t\t\t\treturn ray.intersectsBox( box ) ? INTERSECTED : NOT_INTERSECTED;\n\n\t\t\t},\n\t\t\tintersectsTriangle: triangle => {\n\n\t\t\t\tconst distancesToRaySq = ray.distanceSqToPoint( triangle.a );\n\t\t\t\tif ( distancesToRaySq < localThresholdSq ) {\n\n\t\t\t\t\t// track the closest found point distance so we can early out traversal and only\n\t\t\t\t\t// use the closest point along the ray.\n\t\t\t\t\tconst distanceToPoint = ray.origin.distanceTo( triangle.a );\n\t\t\t\t\tif ( distanceToPoint < closestDistance ) {\n\n\t\t\t\t\t\tclosestDistance = distanceToPoint;\n\t\t\t\t\t\tsphereCollision.position.copy( triangle.a ).applyMatrix4( bvhMesh.matrixWorld );\n\t\t\t\t\t\tsphereCollision.visible = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\t\t} );\n\n\t} else {\n\n\t\tconst intersects = raycaster.intersectObject( pointCloud, true );\n\t\tconst hit = intersects[ 0 ];\n\t\tif ( hit ) {\n\n\t\t\tsphereCollision.position.copy( hit.point );\n\t\t\tsphereCollision.visible = true;\n\n\t\t} else {\n\n\t\t\tsphereCollision.visible = false;\n\n\t\t}\n\n\t}\n\n\tconst delta = window.performance.now() - startTime;\n\toutputContainer.innerText = `${ delta.toFixed( 2 ) }ms`;\n\n}, false );\n\nfunction render() {\n\n\trequestAnimationFrame( render );\n\n\tif ( pointCloud ) {\n\n\t\tpointCloud.material.size = params.pointSize;\n\t\thelper.visible = params.displayHelper;\n\t\traycaster.params.Points.threshold = params.raycastThreshold;\n\n\t}\n\n\tstats.begin();\n\n\trenderer.render( scene, camera );\n\tstats.end();\n\n}\n\n\ninit();\nrender();\n"],"names":["$dfab0b5db083582f$export$2e2bcd8739ae039","mode","container","document","createElement","addPanel","panel","appendChild","dom","showPanel","id","i","children","length","style","display","cssText","addEventListener","event","preventDefault","beginTime","performance","Date","now","prevTime","frames","fpsPanel","Panel","msPanel","self","memory","memPanel","REVISION","begin","end","time","update","usedJSHeapSize","jsHeapSizeLimit","this","domElement","setMode","name","fg","bg","min","Infinity","max","round","Math","PR","window","devicePixelRatio","WIDTH","HEIGHT","TEXT_X","TEXT_Y","GRAPH_X","GRAPH_Y","GRAPH_WIDTH","GRAPH_HEIGHT","canvas","width","height","context","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","value","maxValue","drawImage","$7935d8ef7280cfaf$var$_color","Color","$7935d8ef7280cfaf$export$363d99ab40f454cb","$hGT0Q","Loader","manager","super","propertyNameMapping","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","setPropertyNameMapping","mapping","data","parseHeader","headerText","headerLength","result","exec","Blob","size","header","comments","elements","objInfo","lines","split","currentElement","make_ply_element_property","propertValues","property","type","countType","itemType","line","trim","lineValues","lineType","shift","join","format","version","push","undefined","count","parseInt","properties","log","parseASCIINumber","n","parseFloat","parseASCIIElement","values","element","list","j","parseASCII","buffer","indices","vertices","normals","uvs","faceVertexUvs","colors","body","currentElementCount","handleElement","postProcess","geometry","BufferGeometry","setIndex","setAttribute","Float32BufferAttribute","toNonIndexed","computeBoundingSphere","elementName","findAttrName","names","l","attrX","attrY","attrZ","attrNX","attrNY","attrNZ","attrS","attrT","attrR","attrG","attrB","setRGB","convertSRGBToLinear","r","g","b","vertex_indices","vertex_index","texcoord","binaryRead","dataview","at","little_endian","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","binaryReadElement","read","ArrayBuffer","LoaderUtils","decodeText","Uint8Array","DataView","loc","parseBinary","$7d4f657bb7b0102c$var$stats","$7d4f657bb7b0102c$var$scene","$7d4f657bb7b0102c$var$camera","$7d4f657bb7b0102c$var$renderer","$7d4f657bb7b0102c$var$bvhMesh","$7d4f657bb7b0102c$var$helper","$7d4f657bb7b0102c$var$pointCloud","$7d4f657bb7b0102c$var$outputContainer","Mesh","prototype","raycast","$aBPXg","acceleratedRaycast","computeBoundsTree","disposeBoundsTree","$7d4f657bb7b0102c$var$sphereCollision","$7d4f657bb7b0102c$var$mouse","Vector2","$7d4f657bb7b0102c$var$raycaster","Raycaster","$7d4f657bb7b0102c$var$params","displayHelper","helperDepth","displayParents","strategy","CENTER","pointSize","raycastThreshold","useBVH","x","clientX","innerWidth","y","clientY","innerHeight","setFromCamera","startTime","visible","inverseMatrix","Matrix4","copy","matrixWorld","invert","ray","applyMatrix4","localThreshold","params","Points","threshold","scale","z","localThresholdSq","closestDistance","boundsTree","shapecast","boundsTraverseOrder","box","distanceToPoint","origin","intersectsBounds","isLeaf","score","NOT_INTERSECTED","expandByScalar","intersectsBox","INTERSECTED","intersectsTriangle","triangle","distanceSqToPoint","a","distanceTo","position","hit","intersectObject","point","delta","innerText","toFixed","getElementById","WebGLRenderer","antialias","setPixelRatio","setSize","setClearColor","Scene","PerspectiveCamera","set","far","updateProjectionMatrix","$W2bOH","OrbitControls","aspect","center","material","PointsMaterial","vertexColors","matrixAutoUpdate","add","bvhGeometry","clone","attributes","bvhMaterial","MeshBasicMaterial","color","timeEnd","MeshBVHVisualizer","depth","SphereGeometry","opacity","transparent","gui","$ghLil","GUI","helperFolder","addFolder","onChange","v","open","pointsFolder","AVERAGE","SAH","$7d4f657bb7b0102c$var$init","$7d4f657bb7b0102c$var$render","requestAnimationFrame","render"],"version":3,"file":"pointCloudIntersection.222ac2b2.js.map"}